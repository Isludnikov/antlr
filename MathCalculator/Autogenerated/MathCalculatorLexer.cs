//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/home/sludnikovi/repos/Antlr_expression/MathCalculator.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MathCalculatorAutogenerated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MathCalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, PLUSMINUSOP=2, MULDIVMODOP=3, LET=4, LPAREN=5, RPAREN=6, PLUS=7, 
		MINUS=8, MUL=9, DIV=10, MOD=11, POINT=12, E=13, POW=14, COMMA=15, DIGIT=16, 
		ID=17, WS=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "PLUSMINUSOP", "MULDIVMODOP", "LET", "LPAREN", "RPAREN", "PLUS", 
		"MINUS", "MUL", "DIV", "MOD", "POINT", "E", "POW", "COMMA", "DIGIT", "ID", 
		"WS"
	};


	public MathCalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MathCalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'.'", null, "'^'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "PLUSMINUSOP", "MULDIVMODOP", "LET", "LPAREN", "RPAREN", 
		"PLUS", "MINUS", "MUL", "DIV", "MOD", "POINT", "E", "POW", "COMMA", "DIGIT", 
		"ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MathCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MathCalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,108,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,5,0,42,8,0,10,0,12,
		0,45,9,0,1,0,1,0,1,0,1,0,1,0,5,0,52,8,0,10,0,12,0,55,9,0,1,0,3,0,58,8,
		0,1,1,1,1,3,1,62,8,1,1,2,1,2,1,2,3,2,67,8,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
		6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
		1,14,1,14,1,15,1,15,1,16,1,16,5,16,97,8,16,10,16,12,16,100,9,16,1,17,4,
		17,103,8,17,11,17,12,17,104,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,
		0,7,1,0,92,92,2,0,34,34,92,92,2,0,39,39,92,92,2,0,69,69,101,101,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,117,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,1,57,1,0,0,0,3,61,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,0,9,70,
		1,0,0,0,11,72,1,0,0,0,13,74,1,0,0,0,15,76,1,0,0,0,17,78,1,0,0,0,19,80,
		1,0,0,0,21,82,1,0,0,0,23,84,1,0,0,0,25,86,1,0,0,0,27,88,1,0,0,0,29,90,
		1,0,0,0,31,92,1,0,0,0,33,94,1,0,0,0,35,102,1,0,0,0,37,43,5,34,0,0,38,39,
		7,0,0,0,39,42,2,0,65534,0,40,42,8,1,0,0,41,38,1,0,0,0,41,40,1,0,0,0,42,
		45,1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,
		58,5,34,0,0,47,53,5,39,0,0,48,49,7,0,0,0,49,52,2,0,65534,0,50,52,8,2,0,
		0,51,48,1,0,0,0,51,50,1,0,0,0,52,55,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,
		0,54,56,1,0,0,0,55,53,1,0,0,0,56,58,5,39,0,0,57,37,1,0,0,0,57,47,1,0,0,
		0,58,2,1,0,0,0,59,62,3,13,6,0,60,62,3,15,7,0,61,59,1,0,0,0,61,60,1,0,0,
		0,62,4,1,0,0,0,63,67,3,17,8,0,64,67,3,19,9,0,65,67,3,21,10,0,66,63,1,0,
		0,0,66,64,1,0,0,0,66,65,1,0,0,0,67,6,1,0,0,0,68,69,5,61,0,0,69,8,1,0,0,
		0,70,71,5,40,0,0,71,10,1,0,0,0,72,73,5,41,0,0,73,12,1,0,0,0,74,75,5,43,
		0,0,75,14,1,0,0,0,76,77,5,45,0,0,77,16,1,0,0,0,78,79,5,42,0,0,79,18,1,
		0,0,0,80,81,5,47,0,0,81,20,1,0,0,0,82,83,5,37,0,0,83,22,1,0,0,0,84,85,
		5,46,0,0,85,24,1,0,0,0,86,87,7,3,0,0,87,26,1,0,0,0,88,89,5,94,0,0,89,28,
		1,0,0,0,90,91,5,44,0,0,91,30,1,0,0,0,92,93,2,48,57,0,93,32,1,0,0,0,94,
		98,7,4,0,0,95,97,7,5,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,
		99,1,0,0,0,99,34,1,0,0,0,100,98,1,0,0,0,101,103,7,6,0,0,102,101,1,0,0,
		0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,
		107,6,17,0,0,107,36,1,0,0,0,10,0,41,43,51,53,57,61,66,98,104,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MathCalculatorAutogenerated

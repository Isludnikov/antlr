//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/home/sludnikovi/repos/Antlr_expression/Expression.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ExpressionAutogenerated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, STRING=4, LET=5, LPAREN=6, RPAREN=7, LLIST=8, 
		RLIST=9, PLUS=10, MINUS=11, MUL=12, DIV=13, MOD=14, GT_OR_EQ=15, LT_OR_EQ=16, 
		GT=17, LT=18, EQ=19, POINT=20, IN=21, NOT_IN=22, NE=23, LIKE=24, E=25, 
		POW=26, OR=27, AND=28, COMMA=29, NOT=30, DIGIT=31, ID=32, WS=33;
	public const int
		RULE_logicExpression = 0, RULE_andEquation = 1, RULE_equation = 2, RULE_numericExpression = 3, 
		RULE_multiplyingExpression = 4, RULE_powExpression = 5, RULE_atom = 6, 
		RULE_unaryMinus = 7, RULE_minusable = 8, RULE_group = 9, RULE_scientific = 10, 
		RULE_string = 11, RULE_func = 12, RULE_parameters = 13, RULE_parameter = 14, 
		RULE_funcName = 15, RULE_paramName = 16, RULE_paramValue = 17, RULE_metaFilter = 18, 
		RULE_simpleFilter = 19, RULE_simpleFilterExpression = 20, RULE_simpleFilterExpressionField = 21, 
		RULE_simpleFilterExpressionValue = 22, RULE_cmpOp = 23, RULE_number = 24, 
		RULE_scalarVariable = 25, RULE_listLiteral = 26, RULE_listVariable = 27, 
		RULE_notExpression = 28, RULE_notExpressionInner = 29;
	public static readonly string[] ruleNames = {
		"logicExpression", "andEquation", "equation", "numericExpression", "multiplyingExpression", 
		"powExpression", "atom", "unaryMinus", "minusable", "group", "scientific", 
		"string", "func", "parameters", "parameter", "funcName", "paramName", 
		"paramValue", "metaFilter", "simpleFilter", "simpleFilterExpression", 
		"simpleFilterExpressionField", "simpleFilterExpressionValue", "cmpOp", 
		"number", "scalarVariable", "listLiteral", "listVariable", "notExpression", 
		"notExpressionInner"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'@'", null, "'='", "'('", "')'", "'['", "']'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'>='", "'<='", "'>'", "'<'", "'=='", "'.'", 
		"'IN'", null, null, "'LIKE'", null, "'^'", null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "STRING", "LET", "LPAREN", "RPAREN", "LLIST", 
		"RLIST", "PLUS", "MINUS", "MUL", "DIV", "MOD", "GT_OR_EQ", "LT_OR_EQ", 
		"GT", "LT", "EQ", "POINT", "IN", "NOT_IN", "NE", "LIKE", "E", "POW", "OR", 
		"AND", "COMMA", "NOT", "DIGIT", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LogicExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndEquationContext[] andEquation() {
			return GetRuleContexts<AndEquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndEquationContext andEquation(int i) {
			return GetRuleContext<AndEquationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(ExpressionParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(ExpressionParser.OR, i);
		}
		public LogicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExpressionContext logicExpression() {
		LogicExpressionContext _localctx = new LogicExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_logicExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			andEquation();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 61;
				Match(OR);
				State = 62;
				andEquation();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndEquationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(ExpressionParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(ExpressionParser.AND, i);
		}
		public AndEquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andEquation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndEquationContext andEquation() {
		AndEquationContext _localctx = new AndEquationContext(Context, State);
		EnterRule(_localctx, 2, RULE_andEquation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			equation();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 69;
				Match(AND);
				State = 70;
				equation();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext[] numericExpression() {
			return GetRuleContexts<NumericExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericExpressionContext numericExpression(int i) {
			return GetRuleContext<NumericExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		EquationContext _localctx = new EquationContext(Context, State);
		EnterRule(_localctx, 4, RULE_equation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			numericExpression();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 32473088L) != 0)) {
				{
				State = 77;
				cmpOp();
				State = 78;
				numericExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(ExpressionParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(ExpressionParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(ExpressionParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(ExpressionParser.MINUS, i);
		}
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_numericExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			multiplyingExpression();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 83;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 84;
				multiplyingExpression();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowExpressionContext[] powExpression() {
			return GetRuleContexts<PowExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowExpressionContext powExpression(int i) {
			return GetRuleContext<PowExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MUL() { return GetTokens(ExpressionParser.MUL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL(int i) {
			return GetToken(ExpressionParser.MUL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(ExpressionParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(ExpressionParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(ExpressionParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(ExpressionParser.MOD, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			powExpression();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				{
				State = 91;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 92;
				powExpression();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(ExpressionParser.POW, 0); }
		public PowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowExpressionContext powExpression() {
		PowExpressionContext _localctx = new PowExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_powExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			atom();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POW) {
				{
				State = 99;
				Match(POW);
				State = 100;
				atom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 12, RULE_atom);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				scientific();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				scalarVariable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106;
				group();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 107;
				listLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 108;
				listVariable();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 109;
				func();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 110;
				notExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 111;
				unaryMinus();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryMinusContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MinusableContext minusable() {
			return GetRuleContext<MinusableContext>(0);
		}
		public UnaryMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryMinus; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryMinusContext unaryMinus() {
		UnaryMinusContext _localctx = new UnaryMinusContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryMinus);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(MINUS);
			State = 115;
			minusable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public MinusableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinusableContext minusable() {
		MinusableContext _localctx = new MinusableContext(Context, State);
		EnterRule(_localctx, 16, RULE_minusable);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				scalarVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				group();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 119;
				func();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 18, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(LPAREN);
			State = 123;
			logicExpression();
			State = 124;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode E() { return GetToken(ExpressionParser.E, 0); }
		public ScientificContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientific(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificContext scientific() {
		ScientificContext _localctx = new ScientificContext(Context, State);
		EnterRule(_localctx, 20, RULE_scientific);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			number();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==E) {
				{
				State = 127;
				Match(E);
				State = 128;
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 22, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncNameContext funcName() {
			return GetRuleContext<FuncNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ExpressionParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ExpressionParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 24, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			funcName();
			State = 134;
			Match(LPAREN);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7516195162L) != 0)) {
				{
				State = 135;
				parameters();
				}
			}

			State = 138;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			parameter();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 141;
				Match(COMMA);
				State = 142;
				parameter();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamValueContext paramValue() {
			return GetRuleContext<ParamValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamNameContext paramName() {
			return GetRuleContext<ParamNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(ExpressionParser.LET, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 148;
				paramName();
				State = 149;
				Match(LET);
				}
				break;
			}
			State = 153;
			paramValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public FuncNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncNameContext funcName() {
		FuncNameContext _localctx = new FuncNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public ParamNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamNameContext paramName() {
		ParamNameContext _localctx = new ParamNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_paramName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetaFilterContext metaFilter() {
			return GetRuleContext<MetaFilterContext>(0);
		}
		public ParamValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamValueContext paramValue() {
		ParamValueContext _localctx = new ParamValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_paramValue);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case STRING:
			case LPAREN:
			case LLIST:
			case MINUS:
			case NOT:
			case DIGIT:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				logicExpression();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				metaFilter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetaFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFilterContext simpleFilter() {
			return GetRuleContext<SimpleFilterContext>(0);
		}
		public MetaFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metaFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetaFilterContext metaFilter() {
		MetaFilterContext _localctx = new MetaFilterContext(Context, State);
		EnterRule(_localctx, 36, RULE_metaFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			simpleFilter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFilterExpressionContext[] simpleFilterExpression() {
			return GetRuleContexts<SimpleFilterExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFilterExpressionContext simpleFilterExpression(int i) {
			return GetRuleContext<SimpleFilterExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public SimpleFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFilterContext simpleFilter() {
		SimpleFilterContext _localctx = new SimpleFilterContext(Context, State);
		EnterRule(_localctx, 38, RULE_simpleFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(T__0);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 166;
				simpleFilterExpression();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 167;
					Match(COMMA);
					State = 168;
					simpleFilterExpression();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 176;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFilterExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFilterExpressionFieldContext simpleFilterExpressionField() {
			return GetRuleContext<SimpleFilterExpressionFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CmpOpContext cmpOp() {
			return GetRuleContext<CmpOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleFilterExpressionValueContext simpleFilterExpressionValue() {
			return GetRuleContext<SimpleFilterExpressionValueContext>(0);
		}
		public SimpleFilterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFilterExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFilterExpressionContext simpleFilterExpression() {
		SimpleFilterExpressionContext _localctx = new SimpleFilterExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleFilterExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			simpleFilterExpressionField();
			State = 179;
			cmpOp();
			State = 180;
			simpleFilterExpressionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFilterExpressionFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public SimpleFilterExpressionFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFilterExpressionField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFilterExpressionField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFilterExpressionFieldContext simpleFilterExpressionField() {
		SimpleFilterExpressionFieldContext _localctx = new SimpleFilterExpressionFieldContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleFilterExpressionField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleFilterExpressionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListVariableContext listVariable() {
			return GetRuleContext<ListVariableContext>(0);
		}
		public SimpleFilterExpressionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleFilterExpressionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFilterExpressionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleFilterExpressionValueContext simpleFilterExpressionValue() {
		SimpleFilterExpressionValueContext _localctx = new SimpleFilterExpressionValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleFilterExpressionValue);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				scalarVariable();
				}
				break;
			case MINUS:
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				scientific();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				@string();
				}
				break;
			case LLIST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				listLiteral();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				listVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CmpOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ExpressionParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ExpressionParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ExpressionParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_OR_EQ() { return GetToken(ExpressionParser.GT_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_OR_EQ() { return GetToken(ExpressionParser.LT_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ExpressionParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_IN() { return GetToken(ExpressionParser.NOT_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ExpressionParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(ExpressionParser.LIKE, 0); }
		public CmpOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmpOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmpOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CmpOpContext cmpOp() {
		CmpOpContext _localctx = new CmpOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_cmpOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32473088L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ExpressionParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(ExpressionParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(ExpressionParser.DIGIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(ExpressionParser.POINT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 48, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 193;
				Match(MINUS);
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 196;
				Match(DIGIT);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POINT) {
				{
				State = 201;
				Match(POINT);
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 202;
					Match(DIGIT);
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DIGIT );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ExpressionParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ExpressionParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POINT() { return GetTokens(ExpressionParser.POINT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT(int i) {
			return GetToken(ExpressionParser.POINT, i);
		}
		public ScalarVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarVariableContext scalarVariable() {
		ScalarVariableContext _localctx = new ScalarVariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_scalarVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(ID);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POINT) {
				{
				{
				State = 210;
				Match(POINT);
				State = 211;
				Match(ID);
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LLIST() { return GetToken(ExpressionParser.LLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIST() { return GetToken(ExpressionParser.RLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionParser.COMMA, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(LLIST);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7516195160L) != 0)) {
				{
				State = 218;
				atom();
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 219;
					Match(COMMA);
					State = 220;
					atom();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 228;
			Match(RLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ExpressionParser.ID, 0); }
		public ListVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListVariableContext listVariable() {
		ListVariableContext _localctx = new ListVariableContext(Context, State);
		EnterRule(_localctx, 54, RULE_listVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(T__2);
			State = 231;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ExpressionParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionInnerContext notExpressionInner() {
			return GetRuleContext<NotExpressionInnerContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(NOT);
			State = 234;
			notExpressionInner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionInnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarVariableContext scalarVariable() {
			return GetRuleContext<ScalarVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public NotExpressionInnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpressionInner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionVisitor<TResult> typedVisitor = visitor as IExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpressionInner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionInnerContext notExpressionInner() {
		NotExpressionInnerContext _localctx = new NotExpressionInnerContext(Context, State);
		EnterRule(_localctx, 58, RULE_notExpressionInner);
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				scalarVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				group();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				func();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,33,242,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,1,0,1,0,5,0,64,8,0,10,0,12,0,67,9,0,1,1,1,1,1,1,5,1,72,8,
		1,10,1,12,1,75,9,1,1,2,1,2,1,2,1,2,3,2,81,8,2,1,3,1,3,1,3,5,3,86,8,3,10,
		3,12,3,89,9,3,1,4,1,4,1,4,5,4,94,8,4,10,4,12,4,97,9,4,1,5,1,5,1,5,3,5,
		102,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,113,8,6,1,7,1,7,1,7,1,
		8,1,8,1,8,3,8,121,8,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,3,10,130,8,10,1,11,
		1,11,1,12,1,12,1,12,3,12,137,8,12,1,12,1,12,1,13,1,13,1,13,5,13,144,8,
		13,10,13,12,13,147,9,13,1,14,1,14,1,14,3,14,152,8,14,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,3,17,162,8,17,1,18,1,18,1,19,1,19,1,19,1,19,5,19,
		170,8,19,10,19,12,19,173,9,19,3,19,175,8,19,1,19,1,19,1,20,1,20,1,20,1,
		20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,190,8,22,1,23,1,23,1,24,3,24,
		195,8,24,1,24,4,24,198,8,24,11,24,12,24,199,1,24,1,24,4,24,204,8,24,11,
		24,12,24,205,3,24,208,8,24,1,25,1,25,1,25,5,25,213,8,25,10,25,12,25,216,
		9,25,1,26,1,26,1,26,1,26,5,26,222,8,26,10,26,12,26,225,9,26,3,26,227,8,
		26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,3,29,240,8,29,
		1,29,0,0,30,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,0,3,1,0,10,11,1,0,12,14,2,0,15,19,21,24,247,
		0,60,1,0,0,0,2,68,1,0,0,0,4,76,1,0,0,0,6,82,1,0,0,0,8,90,1,0,0,0,10,98,
		1,0,0,0,12,112,1,0,0,0,14,114,1,0,0,0,16,120,1,0,0,0,18,122,1,0,0,0,20,
		126,1,0,0,0,22,131,1,0,0,0,24,133,1,0,0,0,26,140,1,0,0,0,28,151,1,0,0,
		0,30,155,1,0,0,0,32,157,1,0,0,0,34,161,1,0,0,0,36,163,1,0,0,0,38,165,1,
		0,0,0,40,178,1,0,0,0,42,182,1,0,0,0,44,189,1,0,0,0,46,191,1,0,0,0,48,194,
		1,0,0,0,50,209,1,0,0,0,52,217,1,0,0,0,54,230,1,0,0,0,56,233,1,0,0,0,58,
		239,1,0,0,0,60,65,3,2,1,0,61,62,5,27,0,0,62,64,3,2,1,0,63,61,1,0,0,0,64,
		67,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,1,1,0,0,0,67,65,1,0,0,0,68,73,
		3,4,2,0,69,70,5,28,0,0,70,72,3,4,2,0,71,69,1,0,0,0,72,75,1,0,0,0,73,71,
		1,0,0,0,73,74,1,0,0,0,74,3,1,0,0,0,75,73,1,0,0,0,76,80,3,6,3,0,77,78,3,
		46,23,0,78,79,3,6,3,0,79,81,1,0,0,0,80,77,1,0,0,0,80,81,1,0,0,0,81,5,1,
		0,0,0,82,87,3,8,4,0,83,84,7,0,0,0,84,86,3,8,4,0,85,83,1,0,0,0,86,89,1,
		0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,7,1,0,0,0,89,87,1,0,0,0,90,95,3,10,
		5,0,91,92,7,1,0,0,92,94,3,10,5,0,93,91,1,0,0,0,94,97,1,0,0,0,95,93,1,0,
		0,0,95,96,1,0,0,0,96,9,1,0,0,0,97,95,1,0,0,0,98,101,3,12,6,0,99,100,5,
		26,0,0,100,102,3,12,6,0,101,99,1,0,0,0,101,102,1,0,0,0,102,11,1,0,0,0,
		103,113,3,20,10,0,104,113,3,22,11,0,105,113,3,50,25,0,106,113,3,18,9,0,
		107,113,3,52,26,0,108,113,3,54,27,0,109,113,3,24,12,0,110,113,3,56,28,
		0,111,113,3,14,7,0,112,103,1,0,0,0,112,104,1,0,0,0,112,105,1,0,0,0,112,
		106,1,0,0,0,112,107,1,0,0,0,112,108,1,0,0,0,112,109,1,0,0,0,112,110,1,
		0,0,0,112,111,1,0,0,0,113,13,1,0,0,0,114,115,5,11,0,0,115,116,3,16,8,0,
		116,15,1,0,0,0,117,121,3,50,25,0,118,121,3,18,9,0,119,121,3,24,12,0,120,
		117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,17,1,0,0,0,122,123,5,6,
		0,0,123,124,3,0,0,0,124,125,5,7,0,0,125,19,1,0,0,0,126,129,3,48,24,0,127,
		128,5,25,0,0,128,130,3,48,24,0,129,127,1,0,0,0,129,130,1,0,0,0,130,21,
		1,0,0,0,131,132,5,4,0,0,132,23,1,0,0,0,133,134,3,30,15,0,134,136,5,6,0,
		0,135,137,3,26,13,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,
		139,5,7,0,0,139,25,1,0,0,0,140,145,3,28,14,0,141,142,5,29,0,0,142,144,
		3,28,14,0,143,141,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,
		0,0,146,27,1,0,0,0,147,145,1,0,0,0,148,149,3,32,16,0,149,150,5,5,0,0,150,
		152,1,0,0,0,151,148,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,3,
		34,17,0,154,29,1,0,0,0,155,156,5,32,0,0,156,31,1,0,0,0,157,158,5,32,0,
		0,158,33,1,0,0,0,159,162,3,0,0,0,160,162,3,36,18,0,161,159,1,0,0,0,161,
		160,1,0,0,0,162,35,1,0,0,0,163,164,3,38,19,0,164,37,1,0,0,0,165,174,5,
		1,0,0,166,171,3,40,20,0,167,168,5,29,0,0,168,170,3,40,20,0,169,167,1,0,
		0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,175,1,0,0,0,173,
		171,1,0,0,0,174,166,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,5,
		2,0,0,177,39,1,0,0,0,178,179,3,42,21,0,179,180,3,46,23,0,180,181,3,44,
		22,0,181,41,1,0,0,0,182,183,5,32,0,0,183,43,1,0,0,0,184,190,3,50,25,0,
		185,190,3,20,10,0,186,190,3,22,11,0,187,190,3,52,26,0,188,190,3,54,27,
		0,189,184,1,0,0,0,189,185,1,0,0,0,189,186,1,0,0,0,189,187,1,0,0,0,189,
		188,1,0,0,0,190,45,1,0,0,0,191,192,7,2,0,0,192,47,1,0,0,0,193,195,5,11,
		0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,198,5,31,0,0,197,
		196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,207,1,
		0,0,0,201,203,5,20,0,0,202,204,5,31,0,0,203,202,1,0,0,0,204,205,1,0,0,
		0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,201,1,0,0,0,207,
		208,1,0,0,0,208,49,1,0,0,0,209,214,5,32,0,0,210,211,5,20,0,0,211,213,5,
		32,0,0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,
		215,51,1,0,0,0,216,214,1,0,0,0,217,226,5,8,0,0,218,223,3,12,6,0,219,220,
		5,29,0,0,220,222,3,12,6,0,221,219,1,0,0,0,222,225,1,0,0,0,223,221,1,0,
		0,0,223,224,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,226,218,1,0,0,0,226,
		227,1,0,0,0,227,228,1,0,0,0,228,229,5,9,0,0,229,53,1,0,0,0,230,231,5,3,
		0,0,231,232,5,32,0,0,232,55,1,0,0,0,233,234,5,30,0,0,234,235,3,58,29,0,
		235,57,1,0,0,0,236,240,3,50,25,0,237,240,3,18,9,0,238,240,3,24,12,0,239,
		236,1,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,59,1,0,0,0,24,65,73,80,
		87,95,101,112,120,129,136,145,151,161,171,174,189,194,199,205,207,214,
		223,226,239
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ExpressionAutogenerated
